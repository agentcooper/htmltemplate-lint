#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var inspect = require('util').inspect;

var program = require('commander');

var walk = require('walk');

var C = require('../lib/constants');
var linter = require('..');
var formatAsOneline = require('../lib/linter_report');
var analytics = require('../lib/analytics');

program
    .version(require('../package.json').version)
    .option('--oneline', 'output one item per line')
    .option('--json', 'output JSON')
    .option('--track-usage', 'send anonymous usage reports')
    .usage('<file ...>')
    .parse(process.argv);

var filepath = program.args[0];

var extenstions = {
    '.inc': 1,
    '.tmpl': 1
};

function output(report, filepath) {
    if (program.trackUsage) {
        analytics(
            'Lint file',
            report.filter(function(e) { return e.type === C.RESULT_TYPES.WARNING; }).length,
            report.filter(function(e) { return e.type === C.RESULT_TYPES.ERROR; }).length
        );
    }

    if (program.oneline) {
        if (report.length > 0) {
            console.log(
                formatAsOneline(report, filepath)
            );
        }

        return;
    }

    if (program.json) {
        console.log(
            JSON.stringify(report, null, 4)
        );

        return;
    }

    console.log(
        inspect(report, { colors: true, depth: Infinity })
    );
}

var walker = walk.walk(filepath, { followLinks: false });

walker
.on('file', function(root, fileStats, next) {
    var extenstion = path.extname(fileStats.name);

    if (!extenstions[extenstion]) {
        return next();
    }

    var fullPath = path.join(root, fileStats.name);

    linter(fs.readFileSync(fullPath, 'utf8'), function(res) {
        output(res, fullPath);
        next();
    });
})
.on('errors', function(root, nodeStatsArray, next) {
    console.error(nodeStatsArray);
    next();
})
.on('end', function() {
    if (program.trackUsage) {
        process.exit();
    }
});
